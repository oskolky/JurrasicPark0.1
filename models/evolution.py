import random
from models.dinosaur import Dinosaur

class EvolutionResearch:
    def __init__(self):
        self.traits_db = {
            "–ê—Ä—Ö–µ–æ–ø—Ç–µ—Ä–∏–∫—Å": ["–ø–µ—Ä—å—è", "–ª—ë–≥–∫–∏–µ –∫–æ—Å—Ç–∏", "—Ö–∏—â–Ω–∏–∫"],
            "–í–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä": ["–ø–µ—Ä—å—è", "–≥–∏–±–∫–æ—Å—Ç—å", "—Ö–∏—â–Ω–∏–∫"],
            "–¢–∏-—Ä–µ–∫—Å": ["–æ–≥—Ä–æ–º–Ω—ã–µ —á–µ–ª—é—Å—Ç–∏", "–º–æ—â–Ω—ã–µ –Ω–æ–≥–∏", "—Ö–∏—â–Ω–∏–∫"],
            "–¢—Ä–∏—Ü–µ—Ä–∞—Ç–æ–ø—Å": ["—Ä–æ–≥–∞—Ç–∞—è –≥–æ–ª–æ–≤–∞", "–∫–ª—é–≤", "—Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π"],
            "–ë—Ä–∞—Ö–∏–æ–∑–∞–≤—Ä": ["–¥–ª–∏–Ω–Ω–∞—è —à–µ—è", "—Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π", "–æ–≥—Ä–æ–º–Ω—ã–π —Ä–æ—Å—Ç"],
            "–ò–≥—É–∞–Ω–æ–¥–æ–Ω": ["–∫–ª—é–≤", "—Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π", "–≥–∏–±–∫–∏–µ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏"],
            "–ü—Å–∏—Ç—Ç–∞–∫–æ–∑–∞–≤—Ä": ["–∫–ª—é–≤", "–º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä", "—Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π"],
            "–î–µ–π–Ω–æ–Ω–∏—Ö": ["–ø–µ—Ä—å—è", "—Å–∏–ª—å–Ω—ã–µ –∫–æ–≥—Ç–∏", "—Ö–∏—â–Ω–∏–∫"]
        }

        self.ancestor_map = {
            "–ê—Ä—Ö–µ–æ–ø—Ç–µ—Ä–∏–∫—Å": "–í–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä",
            "–í–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä": "–¢–∏-—Ä–µ–∫—Å",
            "–ü—Å–∏—Ç—Ç–∞–∫–æ–∑–∞–≤—Ä": "–¢—Ä–∏—Ü–µ—Ä–∞—Ç–æ–ø—Å",
            "–ò–≥—É–∞–Ω–∞–¥–æ–Ω": "–ë—Ä–∞—Ö–∏–æ–∑–∞–≤—Ä",
            "–î–µ–π–Ω–æ–Ω–∏—Ö": "–í–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä"
        }

    def study_evolution(self, dinosaur1: Dinosaur, dinosaur2: Dinosaur):
        if dinosaur1.period == dinosaur2.period:
            return f"‚ùå {dinosaur1.name} –∏ {dinosaur2.name} –∂–∏–ª–∏ –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è, —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–≤—è–∑—å –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–∞."

        evidence = []
        shared_traits = self.compare_traits(dinosaur1, dinosaur2)
        if shared_traits:
            evidence.append(f"üîç –û–±—â–∏–µ —á–µ—Ä—Ç—ã: {', '.join(shared_traits)}.")
        if self.is_potential_ancestor(dinosaur1, dinosaur2):
            evidence.append(f"üß¨ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—É—é —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é.")
        if random.choice([True, False, False]):
            evidence.append("üî¨ –ù–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ—Å—Ç–µ–π.")

        if evidence:
            return f"‚úÖ {dinosaur1.name} ({dinosaur1.period}) –º–æ–≥ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ {dinosaur2.name} ({dinosaur2.period}). –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n" + "\n".join(evidence)
        else:
            return f"‚ö†Ô∏è –°–≤—è–∑—å –º–µ–∂–¥—É {dinosaur1.name} –∏ {dinosaur2.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    def compare_traits(self, dinosaur1: Dinosaur, dinosaur2: Dinosaur):
        traits1 = self.traits_db.get(dinosaur1.name, [])
        traits2 = self.traits_db.get(dinosaur2.name, [])
        return list(set(traits1) & set(traits2))

    def is_potential_ancestor(self, dinosaur1: Dinosaur, dinosaur2: Dinosaur):
        return self.ancestor_map.get(dinosaur1.name) == dinosaur2.name
