class MuseumExhibition:
    def __init__(self, name, location):
        self.name = name
        self.location = location
        self.exhibits = []

    def organize_exhibition(self, excavation, researcher):
        if not excavation.found_fossils:
            return f"üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—ã—Å—Ç–∞–≤–∫—É: –≤ {excavation.formation.name} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        reconstructed_dino = researcher.modeler.reconstruct_dinosaur(excavation.found_fossils)
        exhibit = {
            "formation": excavation.formation.name,
            "age": excavation.formation.age,
            "reconstruction": reconstructed_dino,
            "researcher": researcher.name  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —É—á–µ–Ω–æ–≥–æ
        }
        self.exhibits.append(exhibit)

        return f"üèõÔ∏è –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–∞ –≤—ã—Å—Ç–∞–≤–∫–∞ –≤ {self.location}!\nüåç –§–æ—Ä–º–∞—Ü–∏—è: {exhibit['formation']}\nü¶ñ {exhibit['reconstruction']}\nüë®‚Äçüî¨ –£—á–µ–Ω—ã–π: {exhibit['researcher']}"

    def list_exhibitions(self):
        if not self.exhibits:
            return "üèõÔ∏è –í –º—É–∑–µ–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã—Å—Ç–∞–≤–æ–∫."

        return "\n\n".join(
            f"üåç {exhibit['formation']}\nü¶ñ {exhibit['reconstruction']}\nüë®‚Äçüî¨ –£—á–µ–Ω—ã–π: {exhibit['researcher']}"
            for exhibit in self.exhibits
        )

    def choose_exhibition_and_organize(self, researchers, excavations):
        if not excavations:
            print("üö´ –ù–µ—Ç —Ä–∞—Å–∫–æ–ø–æ–∫ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã—Å—Ç–∞–≤–∫–∏.")
            return

        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–æ–≥–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã—Å—Ç–∞–≤–∫–∏:")
        # –í—ã–≤–æ–¥–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –Ω–æ–º–µ—Ä–∞–º–∏
        for key, researcher in researchers.items():
            print(f"{key}. {researcher.name} - {researcher.field}")

        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —É—á–µ–Ω–æ–≥–æ –ø–æ –Ω–æ–º–µ—Ä—É (–∫–ª—é—á—É)
            researcher_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–æ–≥–æ: ")
            if researcher_choice in researchers:
                selected_researcher = researchers[researcher_choice]
                print(f"–í—ã–±—Ä–∞–Ω —É—á–µ–Ω—ã–π: {selected_researcher.name}, –æ–±–ª–∞—Å—Ç—å: {selected_researcher.field}")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —É—á–µ–Ω–æ–≥–æ.")
                return
        except ValueError:
            print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.")
            return

        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–æ–ø–∫–∏ –¥–ª—è –≤—ã—Å—Ç–∞–≤–∫–∏:")
        excavation_list = list(excavations.values())
        for i, excavation in enumerate(excavation_list, start=1):
            print(f"{i}. {excavation.formation.name} ({excavation.formation.age} –º–ª–Ω –ª–µ—Ç)")

        try:
            excavation_choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞—Å–∫–æ–ø–æ–∫: ")) - 1
            if 0 <= excavation_choice < len(excavation_list):
                excavation = excavation_list[excavation_choice]
                print("\n" + self.organize_exhibition(excavation, selected_researcher))
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–∞—Å–∫–æ–ø–æ–∫.")
        except ValueError:
            print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä.")

    def __str__(self):
        return f"üèõÔ∏è –ú—É–∑–µ–π {self.name} –≤ {self.location}"
