import unittest
from unittest.mock import patch
from models.dinosaur import Dinosaur
from models.dinosaurmodels import DinosaurModeler
from models.excavation import Excavation
from models.formation import GeologicalFormation
from models.researcher import Researcher
from models.evolution import EvolutionResearch

class TestDinosaur(unittest.TestCase):
    def setUp(self):
        self.dinosaurs = {}
        self.dinosaur = Dinosaur("–¢–∏—Ä–∞–Ω–Ω–æ–∑–∞–≤—Ä", "Tyrannosaurus rex", "–ú–µ–ª–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥")

    def test_dinosaur_creation(self):
        self.assertEqual(self.dinosaur.name, "–¢–∏—Ä–∞–Ω–Ω–æ–∑–∞–≤—Ä")
        self.assertEqual(self.dinosaur.scientific_name, "Tyrannosaurus rex")
        self.assertEqual(self.dinosaur.period, "–ú–µ–ª–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥")

    def test_dinosaur_string_representation(self):
        expected_string = "ü¶ñ –¢–∏—Ä–∞–Ω–Ω–æ–∑–∞–≤—Ä (Tyrannosaurus rex), –ø–µ—Ä–∏–æ–¥: –ú–µ–ª–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥"
        self.assertEqual(str(self.dinosaur), expected_string)

    @patch('builtins.input', side_effect=["–¢—Ä–∏—Ü–µ—Ä–∞—Ç–æ–ø—Å", "Triceratops horridus", "–ú–µ–ª–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥"])
    @patch('builtins.print')  # –ú–æ–∫–∏—Ä—É–µ–º print
    def test_add_dinosaur_success(self, mock_print, mock_input):
        Dinosaur.add_dinosaur(self.dinosaurs)
        self.assertIn("–¢—Ä–∏—Ü–µ—Ä–∞—Ç–æ–ø—Å", self.dinosaurs)

    @patch('builtins.input', side_effect=["–¢–∏—Ä–∞–Ω–Ω–æ–∑–∞–≤—Ä", "Tyrannosaurus rex", "–ú–µ–ª–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥"])
    @patch('builtins.print')  # –ú–æ–∫–∏—Ä—É–µ–º print
    def test_add_dinosaur_duplicate(self, mock_print, mock_input):
        self.dinosaurs["–¢–∏—Ä–∞–Ω–Ω–æ–∑–∞–≤—Ä"] = self.dinosaur
        Dinosaur.add_dinosaur(self.dinosaurs)
        self.assertEqual(len(self.dinosaurs), 1)

    @patch('builtins.input', side_effect=["", "", ""])
    @patch('builtins.print')  # –ú–æ–∫–∏—Ä—É–µ–º print
    def test_add_dinosaur_with_missing_fields(self, mock_print, mock_input):
        original_count = len(self.dinosaurs)
        Dinosaur.add_dinosaur(self.dinosaurs)
        self.assertEqual(len(self.dinosaurs), original_count)

class TestDinosaurModeler(unittest.TestCase):
    def setUp(self):
        self.modeler = DinosaurModeler()

    def test_identify_species_success(self):
        fossils = [
            type("Fossil", (), {"name": "—Ä–æ–≥–∞"}),
            type("Fossil", (), {"name": "—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —á–µ—Ä–µ–ø–∞"}),
            type("Fossil", (), {"name": "–∫–ª—é–≤"})
        ]
        result = self.modeler.identify_species(fossils)
        self.assertEqual(result, "–¢—Ä–∏—Ü–µ—Ä–∞—Ç–æ–ø—Å")

    def test_identify_species_not_enough_data(self):
        fossils = []
        result = self.modeler.identify_species(fossils)
        self.assertEqual(result, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∏–¥–∞ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞.")

    def test_identify_species_unknown(self):
        fossils = [
            type("Fossil", (), {"name": "–∫–æ—Å—Ç—å"}),
            type("Fossil", (), {"name": "–∑—É–±"})
        ]
        result = self.modeler.identify_species(fossils)
        self.assertEqual(result, "ü§î –í–∏–¥ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ–∂–Ω–æ.")

    def test_reconstruct_dinosaur_success(self):
        fossils = [
            type("Fossil", (), {"name": "—Ä–æ–≥–∞"}),
            type("Fossil", (), {"name": "—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —á–µ—Ä–µ–ø–∞"}),
            type("Fossil", (), {"name": "–∫–ª—é–≤"})
        ]
        result = self.modeler.reconstruct_dinosaur(fossils)
        self.assertEqual(result, "‚úÖ –ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö —É–¥–∞–ª–æ—Å—å —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å –¢—Ä–∏—Ü–µ—Ä–∞—Ç–æ–ø—Å!")

class TestResearcher(unittest.TestCase):
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã."""
        self.researcher = Researcher("–î–æ–∫—Ç–æ—Ä –ê–ª–∞–Ω –ì—Ä–∞–Ω—Ç", "–ø–∞–ª–µ–æ–Ω—Ç–æ–ª–æ–≥–∏—è")
        self.dino1 = Dinosaur("–¢–∏-—Ä–µ–∫—Å", "Tyrannosaurus rex", "–ú–µ–ª–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥")
        self.dino2 = Dinosaur("–í–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä", "Velociraptor", "–ú–µ–ª–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥")
        self.dinosaurs = {
            "–¢–∏-—Ä–µ–∫—Å": self.dino1,
            "–í–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä": self.dino2
        }
        self.formation = GeologicalFormation("–•–µ–ª–ª-–ö—Ä–∏–∫", 68, "rock", "USA")
        self.excavation = Excavation(self.formation)

    def test_analyze_excavation_no_fossils(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–∫–æ–ø–æ–∫: –∏—Å–∫–æ–ø–∞–µ–º—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."""
        result = self.researcher.analyze_excavation(self.excavation)
        self.assertEqual(result, "üöú –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    @patch.object(EvolutionResearch, 'study_evolution', return_value="‚úÖ –¢–∏-—Ä–µ–∫—Å –º–æ–≥ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ –í–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä.")
    def test_study_evolution_success(self, mock_study):
        """–¢–µ—Å—Ç –∏–∑—É—á–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏: –æ–±–∞ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        result = self.researcher.study_evolution(self.dinosaurs, "–¢–∏-—Ä–µ–∫—Å", "–í–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä")
        self.assertEqual(result, "‚úÖ –¢–∏-—Ä–µ–∫—Å –º–æ–≥ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ –í–µ–ª–æ—Ü–∏—Ä–∞–ø—Ç–æ—Ä.")

    def test_study_evolution_failure(self):
        """–¢–µ—Å—Ç –∏–∑—É—á–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏: –æ–¥–∏–Ω –∏–∑ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""
        result = self.researcher.study_evolution(self.dinosaurs, "–¢–∏-—Ä–µ–∫—Å", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        self.assertEqual(result, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤.")

    def test_str_representation(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è."""
        result = str(self.researcher)
        self.assertEqual(result, "üî¨ –î–æ–∫—Ç–æ—Ä –ê–ª–∞–Ω –ì—Ä–∞–Ω—Ç ‚Äì —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–∞–ª–µ–æ–Ω—Ç–æ–ª–æ–≥–∏—è")

if __name__ == '__main__':
    unittest.main()